Problem-
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:
Input: s = "leetcode"
Output: 0

Example 2:
Input: s = "loveleetcode"
Output: 2

Example 3:
Input: s = "aabb"
Output: -1

Constraints:
a. 1 <= s.length <= 10^5
b. s consists of only lowercase English letters.


Solution-

public int firstUniqChar(String s) {
    // Store character frequency in a hashmap
    Map<Character, Integer> frequency = new HashMap<>();
    for (char c : s.toCharArray()) {
        frequency.put(c, frequency.getOrDefault(c, 0) + 1);
    }

    // Find the first non-repeating character
    for (int i = 0; i < s.length(); i++) {
        if (frequency.get(s.charAt(i)) == 1) {
            return i;
        }
    }

    return -1;
}

Time complexity - O(n)
